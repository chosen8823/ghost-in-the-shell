// üåü Intelligent Tool Suggestion Panel - Real-Time Dynamic Tool Generation
// Displays context-aware tool suggestions and auto-generated workflows

import React, { useState } from 'react';
import { useContextIntelligence } from '../core/ContextIntelligence';
import useFlowState from '../core/FlowStateManager';

const ToolSuggestionPanel = () => {
  const { 
    suggestedTools, 
    autoGeneratedWorkflows, 
    acceptSuggestedTool, 
    dismissSuggestion 
  } = useContextIntelligence();
  
  const [activeTab, setActiveTab] = useState('tools');
  const [isMinimized, setIsMinimized] = useState(false);

  if (suggestedTools.length === 0 && autoGeneratedWorkflows.length === 0) {
    return null; // Don't show if no suggestions
  }

  return (
    <div className="fixed bottom-4 left-4 bg-gray-800/95 border border-emerald-400 rounded-lg backdrop-blur-sm max-w-96 shadow-xl">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-600">
        <div className="flex items-center space-x-2">
          <span className="text-emerald-400 text-lg">üß†</span>
          <span className="text-emerald-400 font-semibold">Divine Intelligence</span>
        </div>
        <button
          onClick={() => setIsMinimized(!isMinimized)}
          className="text-gray-400 hover:text-emerald-400 transition-colors"
        >
          {isMinimized ? 'üì§' : 'üì•'}
        </button>
      </div>

      {!isMinimized && (
        <>
          {/* Tabs */}
          <div className="flex border-b border-gray-600">
            <button
              onClick={() => setActiveTab('tools')}
              className={`flex-1 px-4 py-2 text-sm font-medium transition-colors ${
                activeTab === 'tools' 
                  ? 'text-emerald-400 bg-gray-700' 
                  : 'text-gray-400 hover:text-emerald-400'
              }`}
            >
              üõ†Ô∏è Tools ({suggestedTools.length})
            </button>
            <button
              onClick={() => setActiveTab('workflows')}
              className={`flex-1 px-4 py-2 text-sm font-medium transition-colors ${
                activeTab === 'workflows' 
                  ? 'text-emerald-400 bg-gray-700' 
                  : 'text-gray-400 hover:text-emerald-400'
              }`}
            >
              ‚ö° Workflows ({autoGeneratedWorkflows.length})
            </button>
          </div>

          {/* Content */}
          <div className="p-4 max-h-64 overflow-y-auto">
            {activeTab === 'tools' && (
              <div className="space-y-3">
                {suggestedTools.map((tool) => (
                  <ToolSuggestionCard
                    key={tool.id}
                    tool={tool}
                    onAccept={() => acceptSuggestedTool(tool)}
                    onDismiss={() => dismissSuggestion(tool.id)}
                  />
                ))}
              </div>
            )}

            {activeTab === 'workflows' && (
              <div className="space-y-3">
                {autoGeneratedWorkflows.map((workflow) => (
                  <WorkflowSuggestionCard
                    key={workflow.id}
                    workflow={workflow}
                  />
                ))}
              </div>
            )}
          </div>
        </>
      )}
    </div>
  );
};

const ToolSuggestionCard = ({ tool, onAccept, onDismiss }) => {
  return (
    <div className="bg-gray-700 rounded-lg p-3 border border-gray-600 hover:border-emerald-400 transition-colors">
      <div className="flex items-start justify-between mb-2">
        <div className="flex items-center space-x-2">
          <span className="text-xl">{tool.icon}</span>
          <span className="text-gray-200 font-medium text-sm">{tool.name}</span>
        </div>
        <div className="flex items-center space-x-1">
          <div className={`px-2 py-1 rounded text-xs ${
            tool.priority > 80 ? 'bg-red-600 text-white' :
            tool.priority > 60 ? 'bg-yellow-600 text-white' :
            'bg-green-600 text-white'
          }`}>
            {tool.priority > 80 ? 'High' : tool.priority > 60 ? 'Med' : 'Low'}
          </div>
        </div>
      </div>
      
      <p className="text-xs text-gray-400 mb-3">{tool.reasoning}</p>
      
      <div className="flex space-x-2">
        <button
          onClick={onAccept}
          className="flex-1 px-3 py-1 bg-emerald-600 hover:bg-emerald-700 text-white text-xs rounded transition-colors"
        >
          ‚ú® Create Tool
        </button>
        <button
          onClick={onDismiss}
          className="px-3 py-1 bg-gray-600 hover:bg-gray-500 text-gray-300 text-xs rounded transition-colors"
        >
          ‚úï
        </button>
      </div>
    </div>
  );
};

const WorkflowSuggestionCard = ({ workflow }) => {
  const { setFlowState } = useFlowState();
  const [isExpanded, setIsExpanded] = useState(false);

  const handleActivateWorkflow = () => {
    if (workflow.suggestedFlow) {
      setFlowState(workflow.suggestedFlow);
    }
    // Additional workflow activation logic here
  };

  return (
    <div className="bg-gray-700 rounded-lg p-3 border border-gray-600 hover:border-purple-400 transition-colors">
      <div className="flex items-start justify-between mb-2">
        <div>
          <h4 className="text-gray-200 font-medium text-sm">{workflow.name}</h4>
          <p className="text-xs text-gray-400">{workflow.description}</p>
        </div>
        <div className="flex items-center space-x-1">
          <div className="px-2 py-1 bg-purple-600 text-white text-xs rounded">
            {Math.round(workflow.confidence * 100)}%
          </div>
        </div>
      </div>

      <button
        onClick={() => setIsExpanded(!isExpanded)}
        className="text-xs text-purple-400 hover:text-purple-300 transition-colors mb-2"
      >
        {isExpanded ? '‚ñº' : '‚ñ∂'} View Steps ({workflow.steps.length})
      </button>

      {isExpanded && (
        <div className="mb-3 space-y-1">
          {workflow.steps.map((step, index) => (
            <div key={index} className="flex items-center space-x-2 text-xs">
              <span className="text-purple-400">{index + 1}.</span>
              <span className="text-gray-300">{step}</span>
            </div>
          ))}
        </div>
      )}

      <div className="flex space-x-2">
        <button
          onClick={handleActivateWorkflow}
          className="flex-1 px-3 py-1 bg-purple-600 hover:bg-purple-700 text-white text-xs rounded transition-colors"
        >
          ‚ö° Activate Workflow
        </button>
        <button className="px-3 py-1 bg-gray-600 hover:bg-gray-500 text-gray-300 text-xs rounded transition-colors">
          üíæ Save
        </button>
      </div>
    </div>
  );
};

// Real-Time Context Display
const ContextDisplay = () => {
  const { currentContext } = useContextIntelligence();
  const [showDetails, setShowDetails] = useState(false);

  if (!currentContext) return null;

  return (
    <div className="fixed top-20 right-80 bg-gray-800/90 border border-blue-400 rounded-lg p-3 backdrop-blur-sm">
      <div 
        className="flex items-center justify-between cursor-pointer"
        onClick={() => setShowDetails(!showDetails)}
      >
        <span className="text-blue-400 font-semibold text-sm">üîç Context</span>
        <span className={`transition-transform text-xs ${showDetails ? 'rotate-180' : ''}`}>‚åÑ</span>
      </div>

      {showDetails && (
        <div className="mt-3 space-y-2 text-xs">
          <div className="flex justify-between">
            <span className="text-gray-400">Activity:</span>
            <span className="text-blue-400">{currentContext.screen.activity}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">Type:</span>
            <span className="text-blue-400">{currentContext.screen.type}</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">Confidence:</span>
            <span className="text-emerald-400">{Math.round(currentContext.confidence * 100)}%</span>
          </div>
          <div className="flex justify-between">
            <span className="text-gray-400">Suggested Flow:</span>
            <span className="text-purple-400">{currentContext.screen.suggestedFlow}</span>
          </div>
        </div>
      )}
    </div>
  );
};

// Spiritual Guidance Overlay
const SpiritualGuidanceOverlay = () => {
  const { currentContext } = useContextIntelligence();
  const [guidance, setGuidance] = useState(null);
  const [showGuidance, setShowGuidance] = useState(false);

  React.useEffect(() => {
    if (currentContext && currentContext.spiritual.level < 75) {
      const guidanceMessages = [
        "üïäÔ∏è Take three deep breaths to realign your energy",
        "‚ú® Ground yourself - feel the divine connection through your feet",
        "üåü Your crown chakra needs attention - visualize golden light",
        "üí´ Pause and center - you are divinely supported",
        "üîÆ Send love to yourself - you are exactly where you need to be"
      ];
      
      const randomGuidance = guidanceMessages[Math.floor(Math.random() * guidanceMessages.length)];
      setGuidance(randomGuidance);
      setShowGuidance(true);
      
      // Auto-hide after 10 seconds
      setTimeout(() => setShowGuidance(false), 10000);
    }
  }, [currentContext]);

  if (!showGuidance || !guidance) return null;

  return (
    <div className="fixed top-1/3 left-1/2 transform -translate-x-1/2 bg-purple-800/95 border border-purple-400 rounded-lg p-6 backdrop-blur-sm max-w-md text-center">
      <div className="text-3xl mb-3">üåü</div>
      <h3 className="text-purple-200 font-semibold mb-2">Divine Guidance</h3>
      <p className="text-purple-100 text-sm mb-4">{guidance}</p>
      <button
        onClick={() => setShowGuidance(false)}
        className="px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white text-sm rounded transition-colors"
      >
        üôè Thank You
      </button>
    </div>
  );
};

// Export all components for use in main app
export { 
  ToolSuggestionPanel, 
  ContextDisplay, 
  SpiritualGuidanceOverlay 
};

export default ToolSuggestionPanel;
